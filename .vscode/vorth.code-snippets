{
	/**
	 * vorth official snippets
	 */
	"workerThread": {
		"scope": "javascript",
		"prefix": ">>workerThread",
		"body": [
			"// @ts-check",
			"/**",
			" * @typedef {${1:receiveMainThreadType}} receive",
			" * @typedef {${2:postWorkerThreadType}} post",
			" * @typedef {import('vorth').vorthWorker<receive, post>} workerType",
			" */",
			"/**",
			" * @type {(this: WindowEventHandlers, event: workerType['receive']['worker']) => Promise<any>}",
			" */",
			"onmessage = async function (event) {",
			"\t// calcultaion here",
			"\t/**",
			"\t * @type {workerType['post']['worker']}",
			"\t */",
			"\tconst rest = ${0:postWorkerThreadValue};",
			"\tpostMessage(rest);",
			"};"
		],
		"description": "workerThread"
	},
	"tsworkerThread": {
		"scope": "typescript",
		"prefix": ">>workerThread",
		"body": [
			"import type { vorthWorker } from 'vorth';",
			"",
			"type receive = ${1:receiveMainThreadType};",
			"type post = ${2:postWorkerThreadType};",
			"type workerType = vorthWorker<receive, post>;",
			"",
			"onmessage = async function (",
			"\tthis: WindowEventHandlers,",
			"\tevent: workerType['receive']['worker']",
			"): Promise<any> {",
			"\t// calcultaion here",
			"\tconst rest: workerType['post']['worker'] = ${0:postWorkerThreadValue};",
			"\tpostMessage(rest);",
			"\treturn;",
			"};"
		],
		"description": "tsworkerThread"
	},
	"VorthData": {
		"scope": "javascript",
		"prefix": ">>data",
		"body": [
			"// @ts-check",
			"",
			"/**",
			"* @type {import('vorth').vorthData<${1:isDerived?}, ${2:signalValueType}>}",
			"*/",
			"export const data = ${0:}"
		],
		"description": "VorthData"
	},
	"tsVorthData": {
		"scope": "typescript",
		"prefix": ">>data",
		"body": [
			"import type { vorthData } from 'vorth';",
			"",
			"export const data: vorthData<${1:isDerived?}, ${2:signalValueType}> = ${0:}"
		],
		"description": "tsVorthData"
	},
	"VorthLib": {
		"scope": "javascript",
		"prefix": ">>lib",
		"body": [
			"// @ts-check",
			"/**",
			"* @type {import('vorth').vorthLib<(${1:...argumentsTypes})=>Promise<${3:returnType}>>}",
			"*/",
			"export const lib = async (",
			"{${4:...vorthOptions}},",
			"${2:parameters}",
			") => {",
			"\t${0://code}",
			"};"
		],
		"description": "VorthLib"
	},
	"tsVorthLib": {
		"scope": "typescript",
		"prefix": ">>lib",
		"body": [
			"import type { vorthLib } from 'vorth';",
			"",
			"export const lib: vorthLib<(${1:...argumentsTypes})=>Promise<${3:returnType}>> = async (",
			"{${4:...vorthOptions}},",
			"${2:parameters}",
			") => {",
			"\t${0://code}",
			"};"
		],
		"description": "tsVorthLib"
	},
	"tsVorthLifecycle": {
		"scope": "typescript",
		"prefix": ">>lifecycle",
		"body": [
			"import type { vorthLifecycle } from 'vorth';",
			"",
			"export const lifecycle: vorthLifecycle = async ({${1:...vorthLifecycleOptions}}) => {",
			"\t${0:// code}",
			"};"
		],
		"description": "tsVorthLifecycle"
	},
	"VorthLifecycle": {
		"scope": "javascript",
		"prefix": ">>lifecycle",
		"body": [
			"// @ts-check",
			"/**",
			"* @type {import('vorth').vorthLifecycle}",
			"*/",
			"export const lifecycle = async ({${1:...vorthLifecycleOptions}}) => {",
			"\t",
			"}"
		],
		"description": "VorthLifecycle"
	}
}
